{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJsonRpcError = exports.getErrorByCode = exports.getError = exports.isValidErrorCode = exports.isReservedErrorCode = exports.isServerErrorCode = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nfunction isServerErrorCode(code) {\n  return code <= constants_1.SERVER_ERROR_CODE_RANGE[0] && code >= constants_1.SERVER_ERROR_CODE_RANGE[1];\n}\n\nexports.isServerErrorCode = isServerErrorCode;\n\nfunction isReservedErrorCode(code) {\n  return constants_1.RESERVED_ERROR_CODES.includes(code);\n}\n\nexports.isReservedErrorCode = isReservedErrorCode;\n\nfunction isValidErrorCode(code) {\n  return isServerErrorCode(code) || isReservedErrorCode(code);\n}\n\nexports.isValidErrorCode = isValidErrorCode;\n\nfunction getError(type) {\n  if (!Object.keys(constants_1.STANDARD_ERROR_MAP).includes(type)) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n\n  return constants_1.STANDARD_ERROR_MAP[type];\n}\n\nexports.getError = getError;\n\nfunction getErrorByCode(code) {\n  const match = Object.values(constants_1.STANDARD_ERROR_MAP).find(e => e.code === code);\n\n  if (!match) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n\n  return match;\n}\n\nexports.getErrorByCode = getErrorByCode;\n\nfunction validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code for JSON-RPC error code: ${response.error.code}`\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n\n    if (error.message !== constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error message for JSON-RPC error code: ${response.error.code}`\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\n\nexports.validateJsonRpcError = validateJsonRpcError;","map":null,"metadata":{},"sourceType":"script"}