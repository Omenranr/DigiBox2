{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmacSha512Verify = exports.hmacSha512Sign = exports.hmacSha256Verify = exports.hmacSha256Sign = void 0;\n\nconst helpers_1 = require(\"../helpers\");\n\nfunction hmacSha256Sign(key, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let result;\n\n    if (helpers_1.isBrowser()) {\n      result = yield helpers_1.browserHmacSha256Sign(key, msg);\n    } else if (helpers_1.isNode()) {\n      result = helpers_1.nodeHmacSha256Sign(key, msg);\n    } else {\n      result = helpers_1.fallbackHmacSha256Sign(key, msg);\n    }\n\n    return result;\n  });\n}\n\nexports.hmacSha256Sign = hmacSha256Sign;\n\nfunction hmacSha256Verify(key, msg, sig) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let result;\n\n    if (helpers_1.isBrowser()) {\n      const expectedSig = yield helpers_1.browserHmacSha256Sign(key, msg);\n      result = helpers_1.isConstantTime(expectedSig, sig);\n    } else if (helpers_1.isNode()) {\n      const expectedSig = helpers_1.nodeHmacSha256Sign(key, msg);\n      result = helpers_1.isConstantTime(expectedSig, sig);\n    } else {\n      const expectedSig = helpers_1.fallbackHmacSha256Sign(key, msg);\n      result = helpers_1.isConstantTime(expectedSig, sig);\n    }\n\n    return result;\n  });\n}\n\nexports.hmacSha256Verify = hmacSha256Verify;\n\nfunction hmacSha512Sign(key, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let result;\n\n    if (helpers_1.isBrowser()) {\n      result = yield helpers_1.browserHmacSha512Sign(key, msg);\n    } else if (helpers_1.isNode()) {\n      result = helpers_1.nodeHmacSha512Sign(key, msg);\n    } else {\n      result = helpers_1.fallbackHmacSha512Sign(key, msg);\n    }\n\n    return result;\n  });\n}\n\nexports.hmacSha512Sign = hmacSha512Sign;\n\nfunction hmacSha512Verify(key, msg, sig) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let result;\n\n    if (helpers_1.isNode()) {\n      const expectedSig = helpers_1.nodeHmacSha512Sign(key, msg);\n      result = helpers_1.isConstantTime(expectedSig, sig);\n    } else {\n      const expectedSig = helpers_1.fallbackHmacSha512Sign(key, msg);\n      result = helpers_1.isConstantTime(expectedSig, sig);\n    }\n\n    return result;\n  });\n}\n\nexports.hmacSha512Verify = hmacSha512Verify;","map":null,"metadata":{},"sourceType":"script"}