{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatErrorMessage = exports.formatJsonRpcError = exports.formatJsonRpcResult = exports.formatJsonRpcRequest = exports.payloadId = void 0;\n\nconst error_1 = require(\"./error\");\n\nconst constants_1 = require(\"./constants\");\n\nfunction payloadId() {\n  const date = Date.now() * Math.pow(10, 3);\n  const extra = Math.floor(Math.random() * Math.pow(10, 3));\n  return date + extra;\n}\n\nexports.payloadId = payloadId;\n\nfunction formatJsonRpcRequest(method, params, id) {\n  return {\n    id: id || payloadId(),\n    jsonrpc: \"2.0\",\n    method,\n    params\n  };\n}\n\nexports.formatJsonRpcRequest = formatJsonRpcRequest;\n\nfunction formatJsonRpcResult(id, result) {\n  return {\n    id,\n    jsonrpc: \"2.0\",\n    result\n  };\n}\n\nexports.formatJsonRpcResult = formatJsonRpcResult;\n\nfunction formatJsonRpcError(id, error) {\n  return {\n    id,\n    jsonrpc: \"2.0\",\n    error: formatErrorMessage(error)\n  };\n}\n\nexports.formatJsonRpcError = formatJsonRpcError;\n\nfunction formatErrorMessage(error) {\n  if (typeof error === \"undefined\") {\n    return error_1.getError(constants_1.INTERNAL_ERROR);\n  }\n\n  if (typeof error === \"string\") {\n    error = Object.assign(Object.assign({}, error_1.getError(constants_1.SERVER_ERROR)), {\n      message: error\n    });\n  }\n\n  if (error_1.isReservedErrorCode(error.code)) {\n    error = error_1.getErrorByCode(error.code);\n  }\n\n  if (!error_1.isServerErrorCode(error.code)) {\n    throw new Error(\"Error code is not in server code range\");\n  }\n\n  return error;\n}\n\nexports.formatErrorMessage = formatErrorMessage;","map":null,"metadata":{},"sourceType":"script"}