{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.browserSha512 = exports.browserSha256 = exports.browserHmacSha512Sign = exports.browserHmacSha256Sign = exports.browserAesDecrypt = exports.browserAesEncrypt = exports.browserImportKey = exports.browserExportKey = exports.getOps = exports.getAlgo = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\n\nconst constants_1 = require(\"../constants\");\n\nfunction getBrowerCrypto() {\n  return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};\n}\n\nexports.getBrowerCrypto = getBrowerCrypto;\n\nfunction getSubtleCrypto() {\n  const browserCrypto = getBrowerCrypto();\n  return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\n\nexports.getSubtleCrypto = getSubtleCrypto;\n\nfunction getAlgo(type) {\n  return type === constants_1.AES_BROWSER_ALGO ? {\n    length: constants_1.AES_LENGTH,\n    name: constants_1.AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: constants_1.HMAC_BROWSER_ALGO\n    },\n    name: constants_1.HMAC_BROWSER\n  };\n}\n\nexports.getAlgo = getAlgo;\n\nfunction getOps(type) {\n  return type === constants_1.AES_BROWSER_ALGO ? [constants_1.ENCRYPT_OP, constants_1.DECRYPT_OP] : [constants_1.SIGN_OP, constants_1.VERIFY_OP];\n}\n\nexports.getOps = getOps;\n\nfunction browserExportKey(cryptoKey, type = constants_1.AES_BROWSER_ALGO) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    return new Uint8Array(yield subtle.exportKey('raw', cryptoKey));\n  });\n}\n\nexports.browserExportKey = browserExportKey;\n\nfunction browserImportKey(buffer, type = constants_1.AES_BROWSER_ALGO) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return getSubtleCrypto().importKey('raw', buffer, getAlgo(type), true, getOps(type));\n  });\n}\n\nexports.browserImportKey = browserImportKey;\n\nfunction browserAesEncrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n    const result = yield subtle.encrypt({\n      iv,\n      name: constants_1.AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n  });\n}\n\nexports.browserAesEncrypt = browserAesEncrypt;\n\nfunction browserAesDecrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n    const result = yield subtle.decrypt({\n      iv,\n      name: constants_1.AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n  });\n}\n\nexports.browserAesDecrypt = browserAesDecrypt;\n\nfunction browserHmacSha256Sign(key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: constants_1.HMAC_LENGTH,\n      name: constants_1.HMAC_BROWSER\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n}\n\nexports.browserHmacSha256Sign = browserHmacSha256Sign;\n\nfunction browserHmacSha512Sign(key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: constants_1.LENGTH_512,\n      name: constants_1.HMAC_BROWSER\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n}\n\nexports.browserHmacSha512Sign = browserHmacSha512Sign;\n\nfunction browserSha256(data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: constants_1.SHA256_BROWSER_ALGO\n    }, data);\n    return new Uint8Array(result);\n  });\n}\n\nexports.browserSha256 = browserSha256;\n\nfunction browserSha512(data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: constants_1.SHA512_BROWSER_ALGO\n    }, data);\n    return new Uint8Array(result);\n  });\n}\n\nexports.browserSha512 = browserSha512;","map":null,"metadata":{},"sourceType":"script"}