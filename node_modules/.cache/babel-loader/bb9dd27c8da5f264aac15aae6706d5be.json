{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nodeRipemd160 = exports.nodeSha512 = exports.nodeSha256 = exports.nodeHmacSha512Sign = exports.nodeHmacSha256Sign = exports.nodeAesDecrypt = exports.nodeAesEncrypt = void 0;\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst enc_utils_1 = require(\"enc-utils\");\n\nconst constants_1 = require(\"../constants\");\n\nfunction nodeAesEncrypt(iv, key, data) {\n  const cipher = crypto_1.default.createCipheriv(constants_1.AES_NODE_ALGO, key, iv);\n  return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(cipher.update(data), cipher.final()));\n}\n\nexports.nodeAesEncrypt = nodeAesEncrypt;\n\nfunction nodeAesDecrypt(iv, key, data) {\n  const decipher = crypto_1.default.createDecipheriv(constants_1.AES_NODE_ALGO, key, iv);\n  return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(decipher.update(data), decipher.final()));\n}\n\nexports.nodeAesDecrypt = nodeAesDecrypt;\n\nfunction nodeHmacSha256Sign(key, data) {\n  const buf = crypto_1.default.createHmac(constants_1.HMAC_NODE_ALGO, new Uint8Array(key)).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeHmacSha256Sign = nodeHmacSha256Sign;\n\nfunction nodeHmacSha512Sign(key, data) {\n  const buf = crypto_1.default.createHmac(constants_1.SHA512_NODE_ALGO, new Uint8Array(key)).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeHmacSha512Sign = nodeHmacSha512Sign;\n\nfunction nodeSha256(data) {\n  const buf = crypto_1.default.createHash(constants_1.SHA256_NODE_ALGO).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeSha256 = nodeSha256;\n\nfunction nodeSha512(data) {\n  const buf = crypto_1.default.createHash(constants_1.SHA512_NODE_ALGO).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeSha512 = nodeSha512;\n\nfunction nodeRipemd160(data) {\n  const buf = crypto_1.default.createHash(constants_1.RIPEMD160_NODE_ALGO).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeRipemd160 = nodeRipemd160;","map":null,"metadata":{},"sourceType":"script"}